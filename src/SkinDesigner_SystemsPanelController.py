# SkinDesigner: A Plugin for Building Skin Design (GPL) started by Santiago Garay

# This file is part of SkinDesigner.
# 
# Copyright (c) 2017, Santiago Garay <sgaray1970@gmail.com> 
# SkinDesigner is free software; you can redistribute it and/or modify 
# it under the terms of the GNU General Public License as published 
# by the Free Software Foundation; either version 3 of the License, 
# or (at your option) any later version. 
# 
# SkinDesigner is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of 
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with SkinDesigner; If not, see <http://www.gnu.org/licenses/>.
# 
# @license GPL-3.0+ <http://spdx.org/licenses/GPL-3.0+>
"""
Use this component to modify panel systems parameters of system panels by assigning numerical values in sequential order to the panels generated by the SkinGenerator component. Panel Controllers are connected to the designControllers input on the SkinGenerator component.

    Args:
        dataList: A list of floating point numbers that will be used to generate the range of values to apply to the panel property. A one mid-point of range constant number is used if not provided.
        panelNamesFilter: A list of strings indicating the panel names to be affected by the panel function. If not provided the fucntion applies to all panels used by the SkinGenerator solution.
        _systemsParameters: A list of strings indicating the panel element properties that will be modified with the resulting data to create a new panel.
    Returns:
        panelController: A panel controller object to be connected to the SkinGenerator component.

"""

ghenv.Component.Name = "SkinDesigner_SystemsPanelController"
ghenv.Component.NickName = 'SystemsPanelController'
ghenv.Component.Message = 'VER 0.5.00\nJul_18_2018'
ghenv.Component.Category = "SkinDesigner"
ghenv.Component.SubCategory = "03 | Design Controllers"
try: ghenv.Component.AdditionalHelpFromDocStrings = "2"
except: pass

import Grasshopper.Kernel as gh
import rhinoscriptsyntax as rs
#import Rhino
import scriptcontext as sc
from types import *
import random
import copy
#import math
#import imp

try:
    SGLibDesignFunction = sc.sticky["SGLib_DesignFunction"]
except:
    ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Warning,"I need SkinDesigner_SkinDesigner component")
    

class PanelDesignFunction(SGLibDesignFunction):
    
    __m_systemsParameters = []
    __m_dataList = []
    __m_dataIndex = 0
    __m_panelNameList= None
    __m_elementIndex=None
    __m_geoIndex = None
    __m_functionType = ''
    __m_customPanelIndex = 0
    __m_excludeCustomSizePanels = False
    warningData = []
    
    #CONSTRUCTOR -------------------------------------------------------------------------------------------
    def __init__(self):
        
        self.__m_functionType = 'Panel'
        self.__m_dataIndex = 0
        self.__m_customPanelIndex = 1
        
            
        if panelNamesFilter <> []: self.__m_panelNameList = panelNamesFilter
        
        excludeCustomSize = False
        if excludeCustomSize : self.__m_excludeCustomSizePanels = excludeCustomSize
        
        if _systemsParameters == []: self.warningData.append("Missing '_systemsParameters' input")
        try:
            if type(_systemsParameters)==ListType and len(_systemsParameters): 
                for param in _systemsParameters:
                    self.__m_systemsParameters.append(eval(param))
        except:
            self.warningData.append("Invalid '_systemsParameters' input")
        
        if _dataList  <> []: 
            self.__m_dataList = copy.deepcopy(_dataList)
        else:
            self.warningData.append("Missing '_dataList' input")            

    def Reset(self):
        self.__m_dataIndex = 0
        self.__m_customPanelIndex = 1
        
    def IsLayoutType(self):
        if self.__m_functionType == 'Layout': return True
        return False
        
        
    def IsPanelType(self):
        if self.__m_functionType == 'Panel': return True
        return False        
        
        
    #----- functionCall valid skin parameters to use as inputs ------
    # skinInstance :  a reference to the skin object calling this function
    # ChangeFlag : List used in Skin Generator to identify panel changes - format: [panel height , panel width , PropertyDictionary ]
    # BasePanel : Panel used as base for new custom panel (can only be used on callState=1 section

    # Flagging panel modifications
    def Run_Flag(self, skinInstance, ChangeFlag, BasePanel):
        
        PanelWidth = ChangeFlag[1]/1000
        PanelHeight = ChangeFlag[0]/1000  
        
        if self.__m_panelNameList == None or BasePanel.GetName() in self.__m_panelNameList :
            
            if self.__m_excludeCustomSizePanels:
                if BasePanel.GetHeight() <> PanelHeight: return
                if BasePanel.GetWidth() <> PanelWidth: return
            
            dataInstance = self.__m_dataList[self.__m_dataIndex]
            
                    
            #store parameters and data in panel change flag 
            propDict = ChangeFlag[2]
            for param in self.__m_systemsParameters:
                if param[0] not in propDict : propDict[param[0]] = []
                propDict[param[0]].append(param[1]+"="+str(dataInstance))
            
            # update data counter for next panel
            self.__m_dataIndex += 1
            if self.__m_dataIndex == len(self.__m_dataList) : self.__m_dataIndex = 0
            
    
    
    
panelController = PanelDesignFunction()
if panelController.warningData <> []: 
    for warning in panelController.warningData: ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Warning, str(warning))

if panelController.warningData <> []: panelController = None

print "Done"
